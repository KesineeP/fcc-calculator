{"version":3,"sources":["component/NumberButtons.js","component/OperatorButtons.js","component/Calculator.js","component/index.js","App.js","index.js"],"names":["NumberButtons","name","areaName","onClickNumber","id","style","default","gridArea","boxShadow","Button","type","variant","onClick","OperatorButtons","onClickOperation","numberList","operatorListTop","operatorListRight","styles","display","minHeight","padding","backgroundColor","margin","borderRadius","width","container","flexDirection","justifyContent","marginTop","border","Calculator","useState","currentValue","setCurrentValue","prevOperand","setPrevOperand","operation","setOperation","lastButtonPressed","setLastButtonPressed","result","data","setData","num","includes","concat","button","newInput","undefined","endsWith","substring","length","calculate","prev","safeEval","inputArray","split","numbers","operators","i","isNaN","match","push","parseFloat","reduce","numValue","index","calcNum","console","log","Container","fluid","className","integerDisplay","stringNumber","toString","integerDigits","decimalDigits","toLocaleString","maximumFractionDigits","toFixed","getDisplayNumber","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55d1a259.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import ButtonGroup from 'react-bootstrap/ButtonGroup';\n\n\nconst NumberButtons = ({ name, areaName, onClickNumber, id }) => {\n    const style = {\n        default: {\n            gridArea: areaName,\n            boxShadow: '1px 1px 3px grey',\n        }\n    }\n    return (\n        <Button\n            type=\"button\"\n            variant=\"outline-secondary\"\n            id={id}\n            style={style.default}\n            onClick={() => onClickNumber(name)}\n        >\n            {name}\n        </Button >\n    )\n}\n\nexport default NumberButtons;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst OperatorButtons = ({ name, id, areaName, onClickOperation }) => {\n    const style = {\n        default: {\n            gridArea: areaName,\n            boxShadow: '1px 1px 3px grey',\n        }\n    }\n    return (\n        <Button\n            variant=\"outline-info\"\n            id={id}\n            style={style.default}\n            onClick={() => onClickOperation(name)}>\n            {name}\n        </Button >\n    )\n}\nexport default OperatorButtons;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './StyleSheet.css';\nimport NumberButtons from './NumberButtons';\nimport OperatorButtons from './OperatorButtons';\nimport { Container } from 'react-bootstrap';\n\nconst numberList = [\n    [\"zero\", \"0\"],\n    [\"one\", \"1\"],\n    [\"two\", \"2\"],\n    [\"three\", \"3\"],\n    [\"four\", \"4\"],\n    [\"five\", \"5\"],\n    [\"six\", \"6\"],\n    [\"seven\", \"7\"],\n    [\"eight\", \"8\"],\n    [\"nine\", \"9\"],\n    [\"decimal\", \".\"]\n];\nconst operatorListTop = [[\"clear\", \"AC\"], [\"divide\", \"รท\"]];\nconst operatorListRight = [[\"multiply\", \"x\"], [\"subtract\", \"-\"], [\"add\", \"+\"], [\"equals\", \"=\"]];\n\nconst Calculator = () => {\n    const [currentValue, setCurrentValue] = useState('');\n    const [prevOperand, setPrevOperand] = useState('');\n    const [operation, setOperation] = useState('');\n    const [lastButtonPressed, setLastButtonPressed] = useState(\"\");\n    const [data, setData] = useState({ result: 0, display: currentValue });\n\n\n    const getDisplayNumber = (num) => {\n        const stringNumber = num.toString()\n        const integerDigits = parseFloat(stringNumber.split('.')[0])\n        const decimalDigits = stringNumber.split('.')[1]\n        let integerDisplay\n        if (isNaN(integerDigits)) {\n            integerDisplay = ''\n        } else {\n            integerDisplay = integerDigits.toLocaleString('en', {\n                maximumFractionDigits: 0\n            })\n        }\n        if (decimalDigits != null) {\n            return `${integerDisplay}.${decimalDigits.length > 4 ? parseFloat(decimalDigits).toFixed(4) : decimalDigits}`\n        } else {\n            return integerDisplay\n        }\n\n    }\n    const onClickNumber = (num) => {\n        if (num === '0' && currentValue === '0') return null;\n        if (num === '0' && prevOperand === '') return null;\n        if (num === '.' && currentValue.includes('.')) return;\n\n        if (num === '.' && currentValue === '') {\n            setCurrentValue('0'.concat(num));\n        } else {\n            setCurrentValue(currentValue.concat(num));\n        }\n        setData({ ...data, display: currentValue.concat(num) })\n        setPrevOperand(`${prevOperand}${num}`)\n        setLastButtonPressed('number');\n\n    }\n\n    const onClickOperation = (button) => {\n        let newInput = undefined;\n        if (button === \"AC\") {\n            setCurrentValue('')\n            setData({ result: 0, display: 0 })\n            setOperation('');\n            setPrevOperand('')\n        } else if (lastButtonPressed !== 'number') {\n            if (button === '-') {\n                setCurrentValue('-');\n                setPrevOperand(`${prevOperand}-`)\n\n            } else if (button !== '-') {\n                newInput = prevOperand.endsWith(\"-\")\n                    ? prevOperand.substring(0, prevOperand.length - 4)\n                    : prevOperand.substring(0, prevOperand.length - 3);\n                setPrevOperand(`${newInput} ${button} `);\n\n            }\n        } else {\n            if (currentValue !== '') calculate(currentValue)\n            setOperation(button)\n            setPrevOperand(`${prevOperand} ${button} `)\n            if (prevOperand.endsWith('-')) {\n                newInput = prevOperand.substring(0, prevOperand.length - 4);\n                setPrevOperand(newInput)\n\n            }\n            if (button === '=') {\n                setData((prev) => {\n                    return { ...prev, display: prev.result }\n                })\n                setPrevOperand(`${prevOperand} `)\n                if (prevOperand[prevOperand.length - 2] === '-') {\n                    setCurrentValue(safeEval(newInput))\n                } else return;\n            }\n\n        }\n        setCurrentValue('');\n        setOperation(button);\n        setLastButtonPressed(button === \"AC\" ? \"number\" : \"operator\");\n\n    }\n\n    const safeEval = (newInput) => {\n        if (!prevOperand) {\n            return currentValue;\n        }\n        const inputArray = newInput ? newInput.split(\" \") : prevOperand.split(\" \");\n        const numbers = [];\n        const operators = [];\n\n        for (let i = 0; i < inputArray.length; i++) {\n            if (!isNaN(inputArray[i])) {\n                numbers.push(parseFloat(inputArray[i]));\n            } else if (inputArray[i].match(/^(\\+|-|x|รท)$/)) {\n                operators.push(inputArray[i]);\n            }\n        }\n        const reducer = (result, numValue, index) => {\n            let calcNum;\n            switch (operators[index - 1]) {\n                case \"-\":\n                    calcNum = result - numValue;\n                    setData({ result: calcNum, display: calcNum })\n                    break;\n                case \"รท\":\n                    calcNum = result / numValue;\n                    setData({ result: calcNum, display: calcNum })\n                    break;\n                case \"+\":\n                    calcNum = result + numValue;\n                    setData({ result: calcNum, display: calcNum })\n                    break;\n                case \"x\":\n                    calcNum = result * numValue;\n                    setData({ result: calcNum, display: calcNum })\n                    break;\n                case \"=\":\n                    break;\n                default:\n                    return;\n            }\n        };\n\n        return numbers.reduce(reducer);\n    };\n\n\n    const calculate = (currentValue) => {\n        const numValue = parseFloat(currentValue);\n\n        if (data.result === 0) {\n            setData({ result: numValue, display: numValue })\n            return;\n        }\n\n        let calcNum;\n        switch (operation) {\n            case \"-\":\n                calcNum = data.result - numValue;\n                setData({ result: calcNum, display: calcNum })\n                break;\n            case \"รท\":\n                calcNum = data.result / numValue;\n                setData({ result: calcNum, display: calcNum })\n                break;\n            case \"+\":\n                calcNum = data.result + numValue;\n                setData({ result: calcNum, display: calcNum })\n                break;\n            case \"x\":\n                calcNum = data.result * numValue;\n                setData({ result: calcNum, display: calcNum })\n                break;\n            case \"=\":\n                break;\n            default:\n                return;\n        }\n\n    };\n\n    console.log(\"prevOperand\", prevOperand);\n    console.log(\"currentValue\", currentValue);\n    console.log(\"operation\", operation);\n    console.log(\"lastbutton\", lastButtonPressed)\n    console.log(\"data\", data)\n    console.log(\"------------\");\n\n    return (\n        <Container fluid>\n            <div style={styles.container}>\n                <h1>Calculator</h1>\n                <div style={styles.display}>\n                    <span className=\"formula\">{prevOperand}</span>\n                    <p className=\"result\" id=\"display\">{getDisplayNumber(data.display) || '0'}</p>\n                </div>\n                <div className=\"button-container\">\n                    <div className=\"operatorListTop\">\n                        {operatorListTop.map((name, index) =>\n                            <OperatorButtons\n                                name={name[1]}\n                                id={name[0]}\n                                key={index}\n                                areaName={name[0]}\n                                onClickOperation={onClickOperation}\n                            />)}\n                    </div>\n                    <div className=\"numberBtn\">\n                        {numberList.map((num, index) =>\n                            <NumberButtons\n                                id={num[0]}\n                                name={num[1]}\n                                areaName={num[0]}\n                                key={index}\n                                onClickNumber={onClickNumber}\n                            />)}\n                    </div>\n                    <div className=\"operatorListRight\">\n                        {operatorListRight.map((name, index) =>\n                            <OperatorButtons\n                                id={name[0]}\n                                name={name[1]}\n                                key={index}\n                                onClickOperation={onClickOperation}\n                            />)}\n                    </div>\n                </div>\n            </div>\n            <p>Coded by Kesinee</p>\n        </Container>\n    )\n}\n\nconst styles = {\n    display: {\n        minHeight: '40px',\n        padding: '10px 0',\n        backgroundColor: 'lightblue',\n        margin: '5px 0',\n        borderRadius: '5px',\n        width: '230px',\n        boxShadow: '1px 1px 3px grey',\n    },\n    container: {\n        width: '250px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        margin: '0 auto',\n        marginTop: '10%',\n        border: '1px solid darkgrey',\n        borderRadius: '10px',\n        boxShadow: '2px 2px 5px grey',\n        padding: '9px',\n        backgroundColor: '#effcf7'\n    },\n}\nexport default Calculator;","import Calculator from './Calculator';\n\nexport default Calculator;","\nimport './App.css';\nimport Calculator from './component';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}